=== COMPILATION METADATA ===
timestamp: 2025-11-01T06:34:03Z
compilerVersion: MiniPar 2025.1
sourceLength: 1319

=== LEXICAL ===
totalTokens: 316
Tokens (type/category/value@line:col)
7/UNKNOWN/'fun'@1:1
16/IDENTIFIER/'partition'@1:5
34/DELIMITER/'('@1:14
16/IDENTIFIER/'arr'@1:15
41/DELIMITER/','@1:18
16/IDENTIFIER/'start'@1:20
41/DELIMITER/','@1:25
16/IDENTIFIER/'end'@1:27
35/DELIMITER/')'@1:30
36/DELIMITER/'{'@1:32
0/KEYWORD/'SEQ'@2:3
36/DELIMITER/'{'@2:7
16/IDENTIFIER/'pivot'@3:5
24/OPERATOR/'='@3:11
16/IDENTIFIER/'arr'@3:13
38/UNKNOWN/'['@3:16
16/IDENTIFIER/'end'@3:17
39/UNKNOWN/']'@3:20
16/IDENTIFIER/'i'@4:5
24/OPERATOR/'='@4:7
16/IDENTIFIER/'start'@4:9
21/OPERATOR/'-'@4:15
17/LITERAL/'1'@4:17
16/IDENTIFIER/'j'@5:5
24/OPERATOR/'='@5:7
16/IDENTIFIER/'start'@5:9
4/KEYWORD/'while'@6:5
34/DELIMITER/'('@6:11
16/IDENTIFIER/'j'@6:12
27/OPERATOR/'<'@6:14
16/IDENTIFIER/'end'@6:16
35/DELIMITER/')'@6:19
0/KEYWORD/'SEQ'@6:21
36/DELIMITER/'{'@6:25
2/KEYWORD/'if'@7:7
34/DELIMITER/'('@7:10
16/IDENTIFIER/'arr'@7:11
38/UNKNOWN/'['@7:14
16/IDENTIFIER/'j'@7:15
39/UNKNOWN/']'@7:16
28/OPERATOR/'<='@7:18
16/IDENTIFIER/'pivot'@7:21
35/DELIMITER/')'@7:26
0/KEYWORD/'SEQ'@7:28
36/DELIMITER/'{'@7:32
16/IDENTIFIER/'i'@8:9
24/OPERATOR/'='@8:11
16/IDENTIFIER/'i'@8:13
20/OPERATOR/'+'@8:15
17/LITERAL/'1'@8:17
16/IDENTIFIER/'temp'@9:9
24/OPERATOR/'='@9:14
16/IDENTIFIER/'arr'@9:16
38/UNKNOWN/'['@9:19
16/IDENTIFIER/'i'@9:20
39/UNKNOWN/']'@9:21
16/IDENTIFIER/'arr'@10:9
38/UNKNOWN/'['@10:12
16/IDENTIFIER/'i'@10:13
39/UNKNOWN/']'@10:14
24/OPERATOR/'='@10:16
16/IDENTIFIER/'arr'@10:18
38/UNKNOWN/'['@10:21
16/IDENTIFIER/'j'@10:22
39/UNKNOWN/']'@10:23
16/IDENTIFIER/'arr'@11:9
38/UNKNOWN/'['@11:12
16/IDENTIFIER/'j'@11:13
39/UNKNOWN/']'@11:14
24/OPERATOR/'='@11:16
16/IDENTIFIER/'temp'@11:18
37/DELIMITER/'}'@12:7
16/IDENTIFIER/'j'@13:3
24/OPERATOR/'='@13:5
16/IDENTIFIER/'j'@13:7
20/OPERATOR/'+'@13:9
17/LITERAL/'1'@13:11
40/DELIMITER/';'@13:12
37/DELIMITER/'}'@14:5
16/IDENTIFIER/'temp'@15:5
24/OPERATOR/'='@15:10
16/IDENTIFIER/'arr'@15:12
38/UNKNOWN/'['@15:15
16/IDENTIFIER/'i'@15:16
20/OPERATOR/'+'@15:18
17/LITERAL/'1'@15:20
39/UNKNOWN/']'@15:21
16/IDENTIFIER/'arr'@16:5
38/UNKNOWN/'['@16:8
16/IDENTIFIER/'i'@16:9
20/OPERATOR/'+'@16:11
17/LITERAL/'1'@16:13
39/UNKNOWN/']'@16:14
24/OPERATOR/'='@16:16
16/IDENTIFIER/'arr'@16:18
38/UNKNOWN/'['@16:21
16/IDENTIFIER/'end'@16:22
39/UNKNOWN/']'@16:25
16/IDENTIFIER/'arr'@17:5
38/UNKNOWN/'['@17:8
16/IDENTIFIER/'end'@17:9
39/UNKNOWN/']'@17:12
24/OPERATOR/'='@17:14
16/IDENTIFIER/'temp'@17:16
8/UNKNOWN/'return'@18:5
16/IDENTIFIER/'i'@18:12
20/OPERATOR/'+'@18:14
17/LITERAL/'1'@18:16
37/DELIMITER/'}'@19:3
37/DELIMITER/'}'@20:1
7/UNKNOWN/'fun'@22:1
16/IDENTIFIER/'quicksort_iterativo'@22:5
34/DELIMITER/'('@22:24
16/IDENTIFIER/'arr'@22:25
41/DELIMITER/','@22:28
16/IDENTIFIER/'end'@22:30
35/DELIMITER/')'@22:33
36/DELIMITER/'{'@22:35
0/KEYWORD/'SEQ'@23:3
36/DELIMITER/'{'@23:7
16/IDENTIFIER/'stack'@24:5
24/OPERATOR/'='@24:11
38/UNKNOWN/'['@24:13
17/LITERAL/'0'@24:14
41/DELIMITER/','@24:15
17/LITERAL/'0'@24:16
41/DELIMITER/','@24:17
17/LITERAL/'0'@24:18
41/DELIMITER/','@24:19
17/LITERAL/'0'@24:20
41/DELIMITER/','@24:21
17/LITERAL/'0'@24:22
41/DELIMITER/','@24:23
17/LITERAL/'0'@24:24
41/DELIMITER/','@24:25
17/LITERAL/'0'@24:26
41/DELIMITER/','@24:27
17/LITERAL/'0'@24:28
39/UNKNOWN/']'@24:29
16/IDENTIFIER/'top'@25:5
24/OPERATOR/'='@25:9
21/OPERATOR/'-'@25:11
17/LITERAL/'1'@25:12
16/IDENTIFIER/'top'@27:5
24/OPERATOR/'='@27:9
16/IDENTIFIER/'top'@27:11
20/OPERATOR/'+'@27:15
17/LITERAL/'1'@27:17
16/IDENTIFIER/'stack'@28:5
38/UNKNOWN/'['@28:10
16/IDENTIFIER/'top'@28:11
39/UNKNOWN/']'@28:14
24/OPERATOR/'='@28:16
17/LITERAL/'0'@28:18
16/IDENTIFIER/'top'@29:5
24/OPERATOR/'='@29:9
16/IDENTIFIER/'top'@29:11
20/OPERATOR/'+'@29:15
17/LITERAL/'1'@29:17
16/IDENTIFIER/'stack'@30:5
38/UNKNOWN/'['@30:10
16/IDENTIFIER/'top'@30:11
39/UNKNOWN/']'@30:14
24/OPERATOR/'='@30:16
16/IDENTIFIER/'end'@30:18
4/KEYWORD/'while'@31:5
34/DELIMITER/'('@31:11
16/IDENTIFIER/'top'@31:12
30/OPERATOR/'>='@31:16
17/LITERAL/'0'@31:19
35/DELIMITER/')'@31:20
0/KEYWORD/'SEQ'@31:22
36/DELIMITER/'{'@31:26
16/IDENTIFIER/'end_local'@32:7
24/OPERATOR/'='@32:17
16/IDENTIFIER/'stack'@32:19
38/UNKNOWN/'['@32:24
16/IDENTIFIER/'top'@32:25
39/UNKNOWN/']'@32:28
16/IDENTIFIER/'top'@33:7
24/OPERATOR/'='@33:11
16/IDENTIFIER/'top'@33:13
21/OPERATOR/'-'@33:17
17/LITERAL/'1'@33:19
16/IDENTIFIER/'start_local'@34:7
24/OPERATOR/'='@34:19
16/IDENTIFIER/'stack'@34:21
38/UNKNOWN/'['@34:26
16/IDENTIFIER/'top'@34:27
39/UNKNOWN/']'@34:30
16/IDENTIFIER/'top'@35:7
24/OPERATOR/'='@35:11
16/IDENTIFIER/'top'@35:13
21/OPERATOR/'-'@35:17
17/LITERAL/'1'@35:19
2/KEYWORD/'if'@36:7
34/DELIMITER/'('@36:10
16/IDENTIFIER/'start_local'@36:11
27/OPERATOR/'<'@36:23
16/IDENTIFIER/'end_local'@36:25
35/DELIMITER/')'@36:34
0/KEYWORD/'SEQ'@36:36
36/DELIMITER/'{'@36:40
16/IDENTIFIER/'pivot_index'@37:9
24/OPERATOR/'='@37:21
16/IDENTIFIER/'partition'@37:23
34/DELIMITER/'('@37:32
16/IDENTIFIER/'arr'@37:33
41/DELIMITER/','@37:36
16/IDENTIFIER/'start_local'@37:38
41/DELIMITER/','@37:49
16/IDENTIFIER/'end_local'@37:51
35/DELIMITER/')'@37:60
2/KEYWORD/'if'@39:9
34/DELIMITER/'('@39:12
16/IDENTIFIER/'start_local'@39:13
27/OPERATOR/'<'@39:25
16/IDENTIFIER/'pivot_index'@39:27
21/OPERATOR/'-'@39:39
17/LITERAL/'1'@39:41
35/DELIMITER/')'@39:42
0/KEYWORD/'SEQ'@39:44
36/DELIMITER/'{'@39:48
16/IDENTIFIER/'top'@40:11
24/OPERATOR/'='@40:15
16/IDENTIFIER/'top'@40:17
20/OPERATOR/'+'@40:21
17/LITERAL/'1'@40:23
16/IDENTIFIER/'stack'@41:11
38/UNKNOWN/'['@41:16
16/IDENTIFIER/'top'@41:17
39/UNKNOWN/']'@41:20
24/OPERATOR/'='@41:22
16/IDENTIFIER/'start_local'@41:24
16/IDENTIFIER/'top'@42:11
24/OPERATOR/'='@42:15
16/IDENTIFIER/'top'@42:17
20/OPERATOR/'+'@42:21
17/LITERAL/'1'@42:23
16/IDENTIFIER/'stack'@43:11
38/UNKNOWN/'['@43:16
16/IDENTIFIER/'top'@43:17
39/UNKNOWN/']'@43:20
24/OPERATOR/'='@43:22
16/IDENTIFIER/'pivot_index'@43:24
21/OPERATOR/'-'@43:36
17/LITERAL/'1'@43:38
37/DELIMITER/'}'@44:9
2/KEYWORD/'if'@46:9
34/DELIMITER/'('@46:12
16/IDENTIFIER/'pivot_index'@46:13
20/OPERATOR/'+'@46:25
17/LITERAL/'1'@46:27
27/OPERATOR/'<'@46:29
16/IDENTIFIER/'end_local'@46:31
35/DELIMITER/')'@46:40
0/KEYWORD/'SEQ'@46:42
36/DELIMITER/'{'@46:46
16/IDENTIFIER/'top'@47:11
24/OPERATOR/'='@47:15
16/IDENTIFIER/'top'@47:17
20/OPERATOR/'+'@47:21
17/LITERAL/'1'@47:23
16/IDENTIFIER/'stack'@48:11
38/UNKNOWN/'['@48:16
16/IDENTIFIER/'top'@48:17
39/UNKNOWN/']'@48:20
24/OPERATOR/'='@48:22
16/IDENTIFIER/'pivot_index'@48:24
20/OPERATOR/'+'@48:36
17/LITERAL/'1'@48:38
16/IDENTIFIER/'top'@49:11
24/OPERATOR/'='@49:15
16/IDENTIFIER/'top'@49:17
20/OPERATOR/'+'@49:21
17/LITERAL/'1'@49:23
16/IDENTIFIER/'stack'@50:11
38/UNKNOWN/'['@50:16
16/IDENTIFIER/'top'@50:17
39/UNKNOWN/']'@50:20
24/OPERATOR/'='@50:22
16/IDENTIFIER/'end_local'@50:24
37/DELIMITER/'}'@51:9
37/DELIMITER/'}'@52:7
37/DELIMITER/'}'@53:5
37/DELIMITER/'}'@54:3
37/DELIMITER/'}'@55:1
0/KEYWORD/'SEQ'@57:1
36/DELIMITER/'{'@57:5
16/IDENTIFIER/'arr'@58:3
24/OPERATOR/'='@58:7
38/UNKNOWN/'['@58:9
17/LITERAL/'33'@58:10
41/DELIMITER/','@58:12
17/LITERAL/'12'@58:14
41/DELIMITER/','@58:16
17/LITERAL/'98'@58:18
41/DELIMITER/','@58:20
17/LITERAL/'5'@58:22
39/UNKNOWN/']'@58:23
5/KEYWORD/'print'@59:3
19/LITERAL/'Array original:'@59:9
41/DELIMITER/','@59:26
16/IDENTIFIER/'arr'@59:28
16/IDENTIFIER/'quicksort_iterativo'@60:3
34/DELIMITER/'('@60:22
16/IDENTIFIER/'arr'@60:23
41/DELIMITER/','@60:26
17/LITERAL/'3'@60:28
35/DELIMITER/')'@60:29
5/KEYWORD/'print'@61:3
19/LITERAL/'Array ordenado:'@61:9
41/DELIMITER/','@61:26
16/IDENTIFIER/'arr'@61:28
37/DELIMITER/'}'@62:1
44/END/''@63:1

=== SYNTAX ===
status: SUCCESS
AST:
Program:
  FunctionDecl: partition
    SEQ:
      Assignment: pivot = 
        ArrayAccess:
          Base:
            Identifier: arr
          Index:
            Identifier: end
      Assignment: i = 
        BinaryOp: -
          Left:
            Identifier: start
          Right:
            Number: 1
      Assignment: j = 
        Identifier: start
      While:
        Condition:
          BinaryOp: <
            Left:
              Identifier: j
            Right:
              Identifier: end
        Body:
          SEQ:
            If:
              Condition:
                BinaryOp: <=
                  Left:
                    ArrayAccess:
                      Base:
                        Identifier: arr
                      Index:
                        Identifier: j
                  Right:
                    Identifier: pivot
              Then:
                SEQ:
                  Assignment: i = 
                    BinaryOp: +
                      Left:
                        Identifier: i
                      Right:
                        Number: 1
                  Assignment: temp = 
                    ArrayAccess:
                      Base:
                        Identifier: arr
                      Index:
                        Identifier: i
            Assignment: j = 
              BinaryOp: +
                Left:
                  Identifier: j
                Right:
                  Number: 1
      Assignment: temp = 
        ArrayAccess:
          Base:
            Identifier: arr
          Index:
            BinaryOp: +
              Left:
                Identifier: i
              Right:
                Number: 1
      Return:
        BinaryOp: +
          Left:
            Identifier: i
          Right:
            Number: 1
  FunctionDecl: quicksort_iterativo
    SEQ:
      Assignment: stack = 
        ArrayLiteral(8):
          Number: 0
          Number: 0
          Number: 0
          Number: 0
          Number: 0
          Number: 0
          Number: 0
          Number: 0
      Assignment: top = 
        UnaryOp: -
          Number: 1
      Assignment: top = 
        BinaryOp: +
          Left:
            Identifier: top
          Right:
            Number: 1
      Assignment: top = 
        BinaryOp: +
          Left:
            Identifier: top
          Right:
            Number: 1
      While:
        Condition:
          BinaryOp: >=
            Left:
              Identifier: top
            Right:
              Number: 0
        Body:
          SEQ:
            Assignment: end_local = 
              ArrayAccess:
                Base:
                  Identifier: stack
                Index:
                  Identifier: top
            Assignment: top = 
              BinaryOp: -
                Left:
                  Identifier: top
                Right:
                  Number: 1
            Assignment: start_local = 
              ArrayAccess:
                Base:
                  Identifier: stack
                Index:
                  Identifier: top
            Assignment: top = 
              BinaryOp: -
                Left:
                  Identifier: top
                Right:
                  Number: 1
            If:
              Condition:
                BinaryOp: <
                  Left:
                    Identifier: start_local
                  Right:
                    Identifier: end_local
              Then:
                SEQ:
                  Assignment: pivot_index = 
                    Call: partition
                      Identifier: arr
                      Identifier: start_local
                      Identifier: end_local
                  If:
                    Condition:
                      BinaryOp: <
                        Left:
                          Identifier: start_local
                        Right:
                          BinaryOp: -
                            Left:
                              Identifier: pivot_index
                            Right:
                              Number: 1
                    Then:
                      SEQ:
                        Assignment: top = 
                          BinaryOp: +
                            Left:
                              Identifier: top
                            Right:
                              Number: 1
                        Assignment: top = 
                          BinaryOp: +
                            Left:
                              Identifier: top
                            Right:
                              Number: 1
                  If:
                    Condition:
                      BinaryOp: <
                        Left:
                          BinaryOp: +
                            Left:
                              Identifier: pivot_index
                            Right:
                              Number: 1
                        Right:
                          Identifier: end_local
                    Then:
                      SEQ:
                        Assignment: top = 
                          BinaryOp: +
                            Left:
                              Identifier: top
                            Right:
                              Number: 1
                        Assignment: top = 
                          BinaryOp: +
                            Left:
                              Identifier: top
                            Right:
                              Number: 1
  SEQ:
    Assignment: arr = 
      ArrayLiteral(4):
        Number: 33
        Number: 12
        Number: 98
        Number: 5
    Print(2):
      String: "Array original:"
      Identifier: arr
    Call: quicksort_iterativo
      Identifier: arr
      Number: 3
    Print(2):
      String: "Array ordenado:"
      Identifier: arr


=== SEMANTIC ===
symbols: 13
top | VARIABLE | int | scope=global
stack | VARIABLE | array | scope=global
partition | FUNCTION | int | scope=global
end_local | VARIABLE | int | scope=global
quicksort_iterativo | FUNCTION | void | scope=global
start_local | VARIABLE | int | scope=global
end | VARIABLE | int | scope=global
temp | VARIABLE | int | scope=global
j | VARIABLE | int | scope=global
start | VARIABLE | int | scope=global
i | VARIABLE | int | scope=global
arr | VARIABLE | array | scope=global
pivot | VARIABLE | int | scope=global
Channel Arity Analysis:
Nenhum canal com operações send/receive.

=== INTERMEDIATE (TAC) ===
instructions: 165
t0 = (=) 33 | type=BINARY
t1 = (=) 12 | type=BINARY
t2 = (=) 98 | type=BINARY
t3 = (=) 5 | type=BINARY
t4 = (array_init) 4 | type=BINARY
t4 = (array_set) t0 , 0 | type=BINARY
t4 = (array_set) t1 , 1 | type=BINARY
t4 = (array_set) t2 , 2 | type=BINARY
t4 = (array_set) t3 , 3 | type=BINARY
arr = (=) t4 | type=BINARY
t5 = (=) Array original: | type=BINARY
 = (print) t5 | type=PRINT
 = (print_last) arr | type=BINARY
t6 = (=) 3 | type=BINARY
arg0 = (=) arr | type=BINARY
arg1 = (=) t6 | type=BINARY
t7 = (call) quicksort_iterativo , 2 | type=BINARY
t8 = (=) Array ordenado: | type=BINARY
 = (print) t8 | type=PRINT
 = (print_last) arr | type=BINARY
 = (goto) L0 | type=JUMP
partition = (label)  | type=LABEL
arr = (param) arg0 | type=BINARY
start = (param) arg1 | type=BINARY
end = (param) arg2 | type=BINARY
t9 = (array_get) arr , end | type=BINARY
pivot = (=) t9 | type=BINARY
t10 = (=) 1 | type=BINARY
t11 = (-) start , t10 | type=BINARY
i = (=) t11 | type=BINARY
j = (=) start | type=BINARY
L1 = (label)  | type=LABEL
t12 = (<) j , end | type=BINARY
 = (if_false) t12 , L2 | type=CONDITIONAL_JUMP
t13 = (array_get) arr , j | type=BINARY
t14 = (<=) t13 , pivot | type=BINARY
 = (if_false) t14 , L3 | type=CONDITIONAL_JUMP
t15 = (=) 1 | type=BINARY
t16 = (+) i , t15 | type=BINARY
i = (=) t16 | type=BINARY
t17 = (array_get) arr , i | type=BINARY
temp = (=) t17 | type=BINARY
t18 = (array_get) arr , j | type=BINARY
arr = (array_set) t18 , i | type=BINARY
arr = (array_set) temp , j | type=BINARY
 = (goto) L4 | type=JUMP
L3 = (label)  | type=LABEL
L4 = (label)  | type=LABEL
t19 = (=) 1 | type=BINARY
t20 = (+) j , t19 | type=BINARY
j = (=) t20 | type=BINARY
 = (goto) L1 | type=JUMP
L2 = (label)  | type=LABEL
t21 = (=) 1 | type=BINARY
t22 = (+) i , t21 | type=BINARY
t23 = (array_get) arr , t22 | type=BINARY
temp = (=) t23 | type=BINARY
t24 = (=) 1 | type=BINARY
t25 = (+) i , t24 | type=BINARY
t26 = (array_get) arr , end | type=BINARY
arr = (array_set) t26 , t25 | type=BINARY
arr = (array_set) temp , end | type=BINARY
t27 = (=) 1 | type=BINARY
t28 = (+) i , t27 | type=BINARY
retval = (=) t28 | type=BINARY
 = (goto) L_return_partition | type=JUMP
L_return_partition = (label)  | type=LABEL
 = (return) retval | type=BINARY
quicksort_iterativo = (label)  | type=LABEL
arr = (param) arg0 | type=BINARY
end = (param) arg1 | type=BINARY
t29 = (=) 0 | type=BINARY
t30 = (=) 0 | type=BINARY
t31 = (=) 0 | type=BINARY
t32 = (=) 0 | type=BINARY
t33 = (=) 0 | type=BINARY
t34 = (=) 0 | type=BINARY
t35 = (=) 0 | type=BINARY
t36 = (=) 0 | type=BINARY
t37 = (array_init) 8 | type=BINARY
t37 = (array_set) t29 , 0 | type=BINARY
t37 = (array_set) t30 , 1 | type=BINARY
t37 = (array_set) t31 , 2 | type=BINARY
t37 = (array_set) t32 , 3 | type=BINARY
t37 = (array_set) t33 , 4 | type=BINARY
t37 = (array_set) t34 , 5 | type=BINARY
t37 = (array_set) t35 , 6 | type=BINARY
t37 = (array_set) t36 , 7 | type=BINARY
stack = (=) t37 | type=BINARY
t38 = (=) 1 | type=BINARY
t40 = (=) 0 | type=BINARY
t39 = (-) t40 , t38 | type=BINARY
top = (=) t39 | type=BINARY
t41 = (=) 1 | type=BINARY
t42 = (+) top , t41 | type=BINARY
top = (=) t42 | type=BINARY
t43 = (=) 0 | type=BINARY
stack = (array_set) t43 , top | type=BINARY
t44 = (=) 1 | type=BINARY
t45 = (+) top , t44 | type=BINARY
top = (=) t45 | type=BINARY
stack = (array_set) end , top | type=BINARY
L5 = (label)  | type=LABEL
t46 = (=) 0 | type=BINARY
t47 = (>=) top , t46 | type=BINARY
 = (if_false) t47 , L6 | type=CONDITIONAL_JUMP
t48 = (array_get) stack , top | type=BINARY
end_local = (=) t48 | type=BINARY
t49 = (=) 1 | type=BINARY
t50 = (-) top , t49 | type=BINARY
top = (=) t50 | type=BINARY
t51 = (array_get) stack , top | type=BINARY
start_local = (=) t51 | type=BINARY
t52 = (=) 1 | type=BINARY
t53 = (-) top , t52 | type=BINARY
top = (=) t53 | type=BINARY
t54 = (<) start_local , end_local | type=BINARY
 = (if_false) t54 , L7 | type=CONDITIONAL_JUMP
arg0 = (=) arr | type=BINARY
arg1 = (=) start_local | type=BINARY
arg2 = (=) end_local | type=BINARY
t55 = (call) partition , 3 | type=BINARY
pivot_index = (=) retval | type=BINARY
t56 = (=) 1 | type=BINARY
t57 = (-) pivot_index , t56 | type=BINARY
t58 = (<) start_local , t57 | type=BINARY
 = (if_false) t58 , L9 | type=CONDITIONAL_JUMP
t59 = (=) 1 | type=BINARY
t60 = (+) top , t59 | type=BINARY
top = (=) t60 | type=BINARY
stack = (array_set) start_local , top | type=BINARY
t61 = (=) 1 | type=BINARY
t62 = (+) top , t61 | type=BINARY
top = (=) t62 | type=BINARY
t63 = (=) 1 | type=BINARY
t64 = (-) pivot_index , t63 | type=BINARY
stack = (array_set) t64 , top | type=BINARY
 = (goto) L10 | type=JUMP
L9 = (label)  | type=LABEL
L10 = (label)  | type=LABEL
t65 = (=) 1 | type=BINARY
t66 = (+) pivot_index , t65 | type=BINARY
t67 = (<) t66 , end_local | type=BINARY
 = (if_false) t67 , L11 | type=CONDITIONAL_JUMP
t68 = (=) 1 | type=BINARY
t69 = (+) top , t68 | type=BINARY
top = (=) t69 | type=BINARY
t70 = (=) 1 | type=BINARY
t71 = (+) pivot_index , t70 | type=BINARY
stack = (array_set) t71 , top | type=BINARY
t72 = (=) 1 | type=BINARY
t73 = (+) top , t72 | type=BINARY
top = (=) t73 | type=BINARY
stack = (array_set) end_local , top | type=BINARY
 = (goto) L12 | type=JUMP
L11 = (label)  | type=LABEL
L12 = (label)  | type=LABEL
 = (goto) L8 | type=JUMP
L7 = (label)  | type=LABEL
L8 = (label)  | type=LABEL
 = (goto) L5 | type=JUMP
L6 = (label)  | type=LABEL
L_return_quicksort_iterativo = (label)  | type=LABEL
 = (return) retval | type=BINARY
L0 = (label)  | type=LABEL

=== CODEGEN (ARMv7) ===
.global _start
.text
_start:
mov r0, #33
mov r1, #12
mov r2, #98
mov r3, #5
mov r4, r5
mov r0, r6
b .
mov r6, #3
mov r6, r4
mov r0, r6
b .
b 
partition:
mov r6, #1
L1:
cmp r6, #0
beq L2
cmp r6, r6
mov r6, #0
bgt L_end_1
L_true_0:
mov r6, #1
L_end_1:
cmp r6, #0
beq L3
mov r6, #1
add r6, r6, r6
b 
L3:
L4:
mov r6, #1
add r6, r6, r6
b 
L2:
mov r6, #1
add r6, r6, r6
mov r6, #1
add r6, r6, r6
mov r6, #1
add r6, r6, r6
b 
L_return_partition:
quicksort_iterativo:
mov r6, #0
mov r6, #0
mov r6, #0
mov r6, #0
mov r6, #0
mov r6, #0
mov r6, #0
mov r6, #0
mov r6, #1
mov r6, #0
mov r6, #1
add r6, r6, r6
mov r6, #0
mov r6, #1
add r6, r6, r6
L5:
mov r6, #0
cmp r6, #0
beq L6
mov r6, #1
mov r6, #1
cmp r6, #0
beq L7
mov r6, r4
mov r6, #1
cmp r6, #0
beq L9
mov r6, #1
add r6, r6, r6
mov r6, #1
add r6, r6, r6
mov r6, #1
b 
L9:
L10:
mov r6, #1
add r6, r6, r6
cmp r6, #0
beq L11
mov r6, #1
add r6, r6, r6
mov r6, #1
add r6, r6, r6
mov r6, #1
add r6, r6, r6
b 
L11:
L12:
b 
L7:
L8:
b 
L6:
L_return_quicksort_iterativo:
L0:
b .

=== EXECUTION (SIMULATED) ===
