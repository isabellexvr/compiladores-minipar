fun partition(arr, start, end) {
  SEQ {
    pivot = arr[end]
    i = start - 1
    j = start
    while (j < end) SEQ {
      if (arr[j] <= pivot) SEQ {
        i = i + 1
        temp = arr[i]
        arr[i] = arr[j]
        arr[j] = temp
      }
      j = j + 1
    }
    temp = arr[i + 1]
    arr[i + 1] = arr[end]
    arr[end] = temp
    return i + 1
  }
}

fun quicksort_iterativo(arr, end) {
  SEQ {
    stack = []
    top = 0
    start = 0
    # push intervalo inicial [start, end]
    stack = stack + [start]; top = top + 1
    stack = stack + [end]; top = top + 1

    while (top > 0) SEQ {
      top = top - 1
      end_local = stack[top]
      top = top - 1
      start_local = stack[top]

      if (start_local < end_local) SEQ {
        pivot_index = partition(arr, start_local, end_local)
        # push subarray esquerda se existir
        left_high = pivot_index - 1
        if (start_local < left_high) SEQ {
          stack = stack + [start_local]; top = top + 1
          stack = stack + [left_high]; top = top + 1
        }
        # push subarray direita se existir
        right_low = pivot_index + 1
        if (right_low < end_local) SEQ {
          stack = stack + [right_low]; top = top + 1
          stack = stack + [end_local]; top = top + 1
        }
      }
    }
  }
}

SEQ {
  arr = [10, 7, 8, 9, 1, 5]
  quicksort_iterativo(arr, 5)
  print "Array ordenado:", arr
}
