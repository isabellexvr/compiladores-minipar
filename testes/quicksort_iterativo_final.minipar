fun partition(arr, start, end) {
  SEQ {
    pivot = arr[end]
    i = start - 1
    j = start
    while (j < end) SEQ {
      if (arr[j] <= pivot) SEQ {
        i = i + 1
        temp = arr[i]
        arr[i] = arr[j]
        arr[j] = temp
      }
  j = j + 1;
    }
    temp = arr[i + 1]
    arr[i + 1] = arr[end]
    arr[end] = temp
    return i + 1
  }
}

fun quicksort_iterativo(arr, end) {
  SEQ {
    stack = [0,0,0,0,0,0,0,0]
    top = -1
    # push intervalo inicial
    top = top + 1
    stack[top] = 0
    top = top + 1
    stack[top] = end
    while (top >= 0) SEQ {
      end_local = stack[top]
      top = top - 1
      start_local = stack[top]
      top = top - 1
      if (start_local < end_local) SEQ {
        pivot_index = partition(arr, start_local, end_local)
        # esquerda
        if (start_local < pivot_index - 1) SEQ {
          top = top + 1
          stack[top] = start_local
          top = top + 1
          stack[top] = pivot_index - 1
        }
        # direita
        if (pivot_index + 1 < end_local) SEQ {
          top = top + 1
          stack[top] = pivot_index + 1
          top = top + 1
          stack[top] = end_local
        }
      }
    }
  }
}

SEQ {
  arr = [33, 12, 98, 5]
  print "Array original:", arr
  quicksort_iterativo(arr, 3)
  print "Array ordenado:", arr
}
