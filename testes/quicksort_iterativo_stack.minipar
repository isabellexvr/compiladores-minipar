fun partition(arr, start, end) {
  SEQ {
    pivot = arr[end]
    i = start - 1
    j = start
    while (j < end) SEQ {
      if (arr[j] <= pivot) SEQ {
        i = i + 1
        temp = arr[i]
        arr[i] = arr[j]
        arr[j] = temp
      }
      j = j + 1
    }
    temp = arr[i + 1]
    arr[i + 1] = arr[end]
    arr[end] = temp
    return i + 1
  }
}

# Funções auxiliares globais para usar pilha manual
fun push(valor) {
  SEQ {
    top = top + 1
    stack[top] = valor
  }
}

fun pop() {
  SEQ {
    valor = stack[top]
    top = top - 1
    return valor
  }
}

fun quicksort_iterativo(arr) {
  SEQ {
    # Pilha capaz de armazenar até 8 inteiros (4 intervalos * 2 limites)
    stack = [0,0,0,0,0,0,0,0]
    top = -1
    tamanho = 4  # fixo para teste
    push(0)
    push(tamanho - 1)

    while (top >= 0) SEQ {
      end = pop()
      start = pop()
      if (start < end) SEQ {
        pivot_index = partition(arr, start, end)
        left_high = pivot_index - 1
        if (start < left_high) SEQ {
          push(start)
          push(left_high)
        }
        right_low = pivot_index + 1
        if (right_low < end) SEQ {
          push(right_low)
          push(end)
        }
      }
    }
  }
}

SEQ {
  arr = [33, 12, 98, 5]
  print "Array original:", arr
  quicksort_iterativo(arr)
  print "Array ordenado:", arr
}
