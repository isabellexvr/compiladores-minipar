CXX = em++
CXXFLAGS = -std=c++17 -Wall -Iinclude -O2
SRCDIR = src
OBJDIR = obj_wasm

# Subdiret√≥rios
SUBDIRS = \
    $(SRCDIR)/frontend/lexer \
    $(SRCDIR)/frontend/parser \
    $(SRCDIR)/frontend/ast \
    $(SRCDIR)/frontend/semantic \
    $(SRCDIR)/middleend/symbol_table \
    $(SRCDIR)/middleend/tac \
    $(SRCDIR)/backend/arm \
    $(SRCDIR)/backend/optimization \
    $(SRCDIR)/emscripten \
    $(SRCDIR)/runtime/threads \
    $(SRCDIR)/runtime/channels

# Fontes para build WASM (apenas emscripten)
SOURCES_ROOT = $(wildcard $(SRCDIR)/*.cpp)
SOURCES_ROOT := $(filter-out $(SRCDIR)/main.cpp,$(SOURCES_ROOT))
SOURCES_SUB  = $(foreach d,$(SUBDIRS),$(wildcard $(d)/*.cpp))
SOURCES = $(SOURCES_ROOT) $(SOURCES_SUB)
OBJECTS = $(patsubst $(SRCDIR)/%.cpp,$(OBJDIR)/%.o,$(SOURCES))
TARGET = web/react/public/compilador.js
$(TARGET): $(OBJECTS)
	$(CXX) $(CXXFLAGS) $(EM_FLAGS) $(OBJECTS) -o $(TARGET)
    
# Flags do Emscripten
EM_FLAGS = -s WASM=1 \
           -s MODULARIZE=1 \
           -s EXPORT_ES6=0 \
           -s EXPORT_NAME='createCompilerModule' \
           -s EXPORTED_RUNTIME_METHODS='["ccall","cwrap","UTF8ToString"]' \
           -s EXPORTED_FUNCTIONS='["_compile_minipar","_free_string"]' \
           -s ALLOW_MEMORY_GROWTH=1 \
           -s INVOKE_RUN=0 \
           -s ENVIRONMENT=web \
           -s FORCE_FILESYSTEM=0

$(TARGET): $(OBJECTS)
	$(CXX) $(CXXFLAGS) $(EM_FLAGS) $(OBJECTS) -o $(TARGET)

$(OBJDIR)/%.o: $(SRCDIR)/%.cpp | $(OBJDIR)
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(OBJDIR):
	mkdir -p $(OBJDIR)

clean:
	rm -rf $(OBJDIR) $(TARGET) web/compilador.wasm

serve:
	cd web && python3 -m http.server 8000

.PHONY: clean serve